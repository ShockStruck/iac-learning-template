---
# IaC Learning Template - Example Docker Compose
# Demonstrates real-world infrastructure patterns with secrets management

version: '3.8'

networks:
  app-network:
    driver: bridge
  monitoring:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data:

x-common-labels: &common-labels
  project: "iac-learning-template"
  environment: "${APP_ENV:-development}"
  
x-security-opts: &security-opts
  read_only: true
  user: "1000:1000"
  security_opt:
    - no-new-privileges:true
  
services:
  # === Database Layer ===
  postgres:
    image: postgres:15-alpine
    container_name: iac-postgres
    networks: [app-network]
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init:/docker-entrypoint-initdb.d:ro
    environment:
      POSTGRES_DB: "${DB_NAME:-appdb}"
      POSTGRES_USER: "${DB_USER:-appuser}"
      POSTGRES_PASSWORD: "${DB_PASSWORD:-defaultpass}"
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-appuser} -d ${DB_NAME:-appdb}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    labels:
      <<: *common-labels
      service: "database"
    restart: unless-stopped
    
  # === Cache Layer ===
  redis:
    image: redis:7-alpine
    container_name: iac-redis
    networks: [app-network]
    volumes:
      - redis-data:/data
    command: >
      redis-server
      --requirepass "${REDIS_PASSWORD:-defaultpass}"
      --appendonly yes
      --appendfsync everysec
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    labels:
      <<: *common-labels
      service: "cache"
    restart: unless-stopped
    
  # === Web Layer ===
  nginx:
    image: nginx:alpine
    container_name: iac-nginx
    networks: 
      - app-network
      - monitoring
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./html:/usr/share/nginx/html:ro
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    labels:
      <<: *common-labels
      service: "web"
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
        
  # === Monitoring Stack ===
  prometheus:
    image: prom/prometheus:latest
    container_name: iac-prometheus
    networks: [monitoring]
    ports:
      - "9090:9090"
    volumes:
      - prometheus-data:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    labels:
      <<: *common-labels
      service: "monitoring"
    restart: unless-stopped
    
  grafana:
    image: grafana/grafana:latest
    container_name: iac-grafana
    networks: [monitoring]
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: "${GRAFANA_ADMIN_PASSWORD:-admin}"
      GF_INSTALL_PLUGINS: "grafana-piechart-panel"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    labels:
      <<: *common-labels
      service: "monitoring"
    restart: unless-stopped
    depends_on:
      - prometheus
      
  # === Application Layer (Example) ===
  app:
    image: nginx:alpine
    container_name: iac-app
    networks: [app-network]
    environment:
      DATABASE_URL: "postgres://${DB_USER:-appuser}:${DB_PASSWORD:-defaultpass}@postgres:5432/${DB_NAME:-appdb}"
      REDIS_URL: "redis://:${REDIS_PASSWORD:-defaultpass}@redis:6379/0"
      APP_SECRET_KEY: "${APP_SECRET_KEY:-default-secret}"
      JWT_SECRET: "${JWT_SECRET:-default-jwt-secret}"
    volumes:
      - ./app:/usr/share/nginx/html:ro
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    labels:
      <<: *common-labels
      service: "application"
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
