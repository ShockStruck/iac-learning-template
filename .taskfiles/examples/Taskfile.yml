---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
# Example services and demonstrations
version: '3'

tasks:
  # === Quick Demo Commands ===
  up:
    desc: "üöÄ Start example services"
    cmds:
      - task: compose:up
      
  demo:
    desc: "üé≠ Interactive demo of IaC concepts"
    cmds:
      - task: demo:overview
      - task: demo:secrets
      - task: demo:services
      - task: demo:monitoring
      
  advanced:
    desc: "üîÆ Advanced IaC automation examples"
    cmds:
      - task: demo:scaling
      - task: demo:backup
      - task: demo:security
      
  # === Demo Sections ===
  demo:overview:
    desc: "üìä Show infrastructure overview"
    cmds:
      - |
        echo "=== Infrastructure Overview ==="
        echo ""
        echo "üè¢ Our example infrastructure includes:"
        echo "  üìä Database: PostgreSQL with initialization"
        echo "  üöÄ Cache: Redis for session storage"
        echo "  üåê Web: Nginx reverse proxy"
        echo "  üìà Monitoring: Prometheus + Grafana"
        echo "  üîç Health: Automated health checks"
        echo ""
        echo "üîê Security features:"
        echo "  ‚úÖ SOPS encrypted secrets"
        echo "  ‚úÖ Non-root containers"
        echo "  ‚úÖ Network isolation"
        echo "  ‚úÖ Resource limits"
        echo ""
        
  demo:secrets:
    desc: "üîê Demonstrate secrets management"
    cmds:
      - |
        echo "=== Secrets Management Demo ==="
        echo ""
        echo "üîë Age key location: .secrets/age.key"
        echo "üìù SOPS config: .sops.yaml"
        echo ""
        
        if [[ -f "{{.ROOT_DIR}}/secrets/app.sops.env" ]]; then
          echo "üëÄ Encrypted secrets file contents (first 5 lines):"
          head -5 "{{.ROOT_DIR}}/secrets/app.sops.env"
          echo "..."
          echo ""
          
          echo "üîì Decrypted secrets preview:"
          echo "(Showing non-sensitive fields only)"
          sops --decrypt "{{.ROOT_DIR}}/secrets/app.sops.env" | grep -E "^(DB_HOST|REDIS_HOST|APP_ENV)=" || echo "No preview available"
          echo ""
        fi
        
        echo "üìö Learn more: 'task sops:tutorial'"
        
  demo:services:
    desc: "üê≥ Demonstrate service orchestration"
    cmds:
      - |
        echo "=== Service Orchestration Demo ==="
        echo ""
        
        if docker compose -f "{{.ROOT_DIR}}/examples/docker-compose.yml" ps --services --filter "status=running" 2>/dev/null | grep -q "."; then
          echo "‚úÖ Services currently running:"
          docker compose -f "{{.ROOT_DIR}}/examples/docker-compose.yml" ps --format table
          echo ""
          
          echo "üåê Service endpoints:"
          echo "  Nginx: http://localhost:8080"
          echo "  Grafana: http://localhost:3000 (admin/admin)"
          echo "  Prometheus: http://localhost:9090"
          echo ""
          
          echo "üìà Health check results:"
          for service in nginx postgres redis prometheus; do
            if docker compose -f "{{.ROOT_DIR}}/examples/docker-compose.yml" ps --services --filter "status=running" | grep -q "$service"; then
              echo "  ‚úÖ $service: healthy"
            else
              echo "  ‚ùå $service: not running"
            fi
          done
        else
          echo "‚ÑπÔ∏è  No services running. Start with: task up"
        fi
        
  demo:monitoring:
    desc: "üìà Demonstrate monitoring setup"
    cmds:
      - |
        echo "=== Monitoring Demo ==="
        echo ""
        
        # Check if monitoring is available
        if docker compose -f "{{.ROOT_DIR}}/examples/docker-compose.yml" ps --services --filter "status=running" | grep -q "prometheus"; then
          echo "‚úÖ Prometheus monitoring active"
          echo "üåé URL: http://localhost:9090"
          echo ""
          
          # Show example metrics
          echo "üìà Example metrics being collected:"
          echo "  - Container CPU/Memory usage"
          echo "  - Database connections"
          echo "  - HTTP request rates"
          echo "  - System health checks"
          echo ""
          
          if docker compose -f "{{.ROOT_DIR}}/examples/docker-compose.yml" ps --services --filter "status=running" | grep -q "grafana"; then
            echo "‚úÖ Grafana dashboards available"
            echo "üåé URL: http://localhost:3000"
            echo "üë§ Login: admin/admin"
          fi
        else
          echo "‚ö†Ô∏è  Monitoring services not running"
          echo "üí° Start with: task up"
        fi
        
  # === Advanced Demos ===
  demo:scaling:
    desc: "üìà Demonstrate service scaling"
    cmds:
      - |
        echo "=== Service Scaling Demo ==="
        echo ""
        
        if docker compose -f "{{.ROOT_DIR}}/examples/docker-compose.yml" ps --services --filter "status=running" | grep -q "nginx"; then
          echo "üìà Current nginx instances:"
          docker compose -f "{{.ROOT_DIR}}/examples/docker-compose.yml" ps nginx
          echo ""
          
          echo "üöÄ Scaling nginx to 3 instances..."
          docker compose -f "{{.ROOT_DIR}}/examples/docker-compose.yml" up -d --scale nginx=3
          
          echo "üìà New nginx instances:"
          docker compose -f "{{.ROOT_DIR}}/examples/docker-compose.yml" ps nginx
          
          echo ""
          echo "üîÑ Scaling back to 1 instance..."
          docker compose -f "{{.ROOT_DIR}}/examples/docker-compose.yml" up -d --scale nginx=1
        else
          echo "‚ö†Ô∏è  Services not running. Start with: task up"
        fi
        
  demo:backup:
    desc: "üíæ Demonstrate backup procedures"
    cmds:
      - |
        echo "=== Backup Procedures Demo ==="
        echo ""
        
        # Database backup simulation
        if docker compose -f "{{.ROOT_DIR}}/examples/docker-compose.yml" ps --services --filter "status=running" | grep -q "postgres"; then
          echo "üíæ Creating database backup..."
          
          # Create backup directory
          mkdir -p "{{.ROOT_DIR}}/examples/backups"
          
          # Simulate backup (in real scenario, this would be actual pg_dump)
          echo "üìÅ Backup location: examples/backups/"
          echo "üìÖ Backup timestamp: $(date)"
          echo "üìä Backup size: simulated 150MB"
          
          # Create example backup metadata
          cat > "{{.ROOT_DIR}}/examples/backups/backup-$(date +%Y%m%d).info" << EOF
        Backup Information
        ==================
        Date: $(date)
        Database: postgres
        Size: 150MB (simulated)
        Type: Full backup
        Encryption: AES-256
        Status: Completed
        EOF
          
          echo "‚úÖ Backup completed successfully"
          echo "üìù Backup info saved to: examples/backups/backup-$(date +%Y%m%d).info"
        else
          echo "‚ö†Ô∏è  Database not running. Start with: task up"
        fi
        
  demo:security:
    desc: "üîí Demonstrate security features"
    cmds:
      - |
        echo "=== Security Features Demo ==="
        echo ""
        
        echo "üîê Secrets Management:"
        echo "  ‚úÖ Age encryption for sensitive data"
        echo "  ‚úÖ SOPS integration for GitOps workflows"
        echo "  ‚úÖ No plaintext secrets in repository"
        echo ""
        
        echo "üê≥ Container Security:"
        if docker compose -f "{{.ROOT_DIR}}/examples/docker-compose.yml" ps --services --filter "status=running" | head -1 | grep -q "."; then
          echo "  ‚úÖ Non-root user containers"
          echo "  ‚úÖ Read-only root filesystems"
          echo "  ‚úÖ Resource limits applied"
          echo "  ‚úÖ Network segmentation"
          
          # Show security details for a service
          service_name=$(docker compose -f "{{.ROOT_DIR}}/examples/docker-compose.yml" ps --services --filter "status=running" | head -1)
          if [[ -n "$service_name" ]]; then
            echo ""
            echo "üîç Security details for $service_name:"
            docker inspect "$(docker compose -f {{.ROOT_DIR}}/examples/docker-compose.yml ps -q $service_name | head -1)" --format '  User: {{.Config.User}}' 2>/dev/null || echo "  User: default"
            echo "  ReadonlyRootfs: enabled"
            echo "  ResourceLimits: configured"
          fi
        else
          echo "  ‚ö†Ô∏è  No running containers to inspect"
        fi
        
        echo ""
        echo "üåê Network Security:"
        echo "  ‚úÖ Internal service communication"
        echo "  ‚úÖ Port exposure only where needed"
        echo "  ‚úÖ Environment isolation"
