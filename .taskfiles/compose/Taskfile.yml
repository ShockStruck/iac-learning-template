---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
# Docker Compose operations with SOPS secrets integration
version: '3'

tasks:
  up:
    desc: "Start services with secrets injection"
    cmds:
      - |
        echo "üöÄ Starting services with encrypted secrets..."
        if [[ -f "{{.ENC_ENV}}" ]]; then
          if grep -q "sops_" "{{.ENC_ENV}}" 2>/dev/null; then
            echo "üîê Decrypting SOPS secrets..."
            export $(sops --decrypt "{{.ENC_ENV}}" | grep -v '^#' | xargs)
          else
            echo "üìù Loading plaintext environment..."
            set -a && source "{{.ENC_ENV}}" && set +a
          fi
        else
          echo "‚ö†Ô∏è  No environment file found at {{.ENC_ENV}}"
          echo "üí° Run 'task sops:init' to create encrypted secrets"
        fi
        echo "üê≥ Starting Docker Compose services..."
        docker compose -f "{{.COMPOSE_FILE}}" up -d
        echo "‚úÖ Services started successfully"
    preconditions:
      - sh: test -f "{{.COMPOSE_FILE}}"
        msg: "Docker Compose file not found: {{.COMPOSE_FILE}}"
        
  down:
    desc: "Stop all services"
    cmds:
      - |
        echo "üõë Stopping services..."
        docker compose -f "{{.COMPOSE_FILE}}" down
        echo "‚úÖ Services stopped"
        
  ps:
    desc: "List running services"
    cmds:
      - |
        echo "üìä Service Status:"
        docker compose -f "{{.COMPOSE_FILE}}" ps
        
  logs:
    desc: "Show logs for services (usage: task compose:logs -- <service>)"
    cmds:
      - |
        if [[ -n "{{.CLI_ARGS}}" ]]; then
          echo "üìù Logs for service: {{.CLI_ARGS}}"
          docker compose -f "{{.COMPOSE_FILE}}" logs -f {{.CLI_ARGS}}
        else
          echo "üìù Logs for all services:"
          docker compose -f "{{.COMPOSE_FILE}}" logs -f
        fi
        
  restart:
    desc: "Restart services (usage: task compose:restart -- <service>)"
    cmds:
      - |
        if [[ -n "{{.CLI_ARGS}}" ]]; then
          echo "üîÑ Restarting service: {{.CLI_ARGS}}"
          docker compose -f "{{.COMPOSE_FILE}}" restart {{.CLI_ARGS}}
        else
          echo "üîÑ Restarting all services..."
          docker compose -f "{{.COMPOSE_FILE}}" restart
        fi
        
  shell:
    desc: "Get shell access to service (usage: task compose:shell -- <service>)"
    cmds:
      - |
        if [[ -z "{{.CLI_ARGS}}" ]]; then
          echo "‚ùå Service name required. Usage: task compose:shell -- <service>"
          exit 1
        fi
        echo "üêö Opening shell in service: {{.CLI_ARGS}}"
        docker compose -f "{{.COMPOSE_FILE}}" exec {{.CLI_ARGS}} /bin/bash || 
        docker compose -f "{{.COMPOSE_FILE}}" exec {{.CLI_ARGS}} /bin/sh
        
  pull:
    desc: "Pull latest images"
    cmds:
      - |
        echo "‚¨áÔ∏è Pulling latest images..."
        docker compose -f "{{.COMPOSE_FILE}}" pull
        echo "‚úÖ Images updated"
