---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
# SOPS secrets management for IaC learning
version: '3'

vars:
  AGE_KEY_FILE: "{{.ROOT_DIR}}/.secrets/age.key"
  SOPS_CONFIG: "{{.ROOT_DIR}}/.sops.yaml"
  SECRETS_DIR: "{{.ROOT_DIR}}/secrets"
  EXAMPLE_ENV: "{{.ROOT_DIR}}/secrets/app.sops.env"

tasks:
  # === Setup and Initialization ===
  init:
    desc: "🔐 Initialize SOPS secrets management"
    cmds:
      - task: keygen
      - task: scaffold
      - task: demo-secrets
      - echo "✅ SOPS initialized with example secrets"
      
  keygen:
    desc: "🔑 Generate Age encryption key"
    cmds:
      - |
        mkdir -p "{{.ROOT_DIR}}/.secrets"
        if [[ ! -f "{{.AGE_KEY_FILE}}" ]]; then
          echo "🔑 Generating new Age key..."
          age-keygen -o "{{.AGE_KEY_FILE}}"
          chmod 600 "{{.AGE_KEY_FILE}}"
          echo "✅ Age key generated: {{.AGE_KEY_FILE}}"
        else
          echo "ℹ️  Age key already exists: {{.AGE_KEY_FILE}}"
        fi
    status:
      - test -f "{{.AGE_KEY_FILE}}"
      
  scaffold:
    desc: "📁 Create SOPS configuration and directories"
    cmds:
      - |
        mkdir -p "{{.SECRETS_DIR}}"
        
        # Create .sops.yaml if it doesn't exist
        if [[ ! -f "{{.SOPS_CONFIG}}" ]]; then
          echo "📝 Creating SOPS configuration..."
          PUBLIC_KEY=$(age-keygen -y "{{.AGE_KEY_FILE}}")
          cat > "{{.SOPS_CONFIG}}" << EOF
        creation_rules:
          - path_regex: .*\.sops\.(yaml|yml|json|env)$
            age: $PUBLIC_KEY
        EOF
          echo "✅ SOPS config created: {{.SOPS_CONFIG}}"
        else
          echo "ℹ️  SOPS config already exists: {{.SOPS_CONFIG}}"
        fi
        
  demo-secrets:
    desc: "📋 Create example encrypted secrets"
    cmds:
      - |
        if [[ ! -f "{{.EXAMPLE_ENV}}" ]]; then
          echo "📝 Creating example secrets file..."
          
          # Create plaintext template first
          cat > "{{.EXAMPLE_ENV}}.tmp" << 'EOF'
        # Example application secrets for IaC learning
        # These are encrypted with SOPS Age encryption
        
        # Database Configuration
        DB_HOST=postgres
        DB_PORT=5432
        DB_NAME=appdb
        DB_USER=appuser
        DB_PASSWORD=super_secure_password_123
        
        # Redis Configuration  
        REDIS_HOST=redis
        REDIS_PORT=6379
        REDIS_PASSWORD=redis_secret_456
        
        # Application Configuration
        APP_ENV=production
        APP_DEBUG=false
        APP_SECRET_KEY=your-32-char-secret-key-here-123
        JWT_SECRET=jwt-signing-secret-key-456
        
        # External API Keys (examples)
        GITHUB_TOKEN=ghp_example_token_12345
        STRIPE_SECRET_KEY=sk_test_example_stripe_key
        
        # Monitoring
        PROMETHEUS_PASSWORD=prometheus_admin_789
        GRAFANA_ADMIN_PASSWORD=grafana_admin_password
        EOF
          
          # Encrypt with SOPS
          echo "🔐 Encrypting secrets with SOPS..."
          sops -e --input-type dotenv --output-type dotenv "{{.EXAMPLE_ENV}}.tmp" > "{{.EXAMPLE_ENV}}"
          rm "{{.EXAMPLE_ENV}}.tmp"
          
          echo "✅ Example secrets created and encrypted: {{.EXAMPLE_ENV}}"
        else
          echo "ℹ️  Example secrets already exist: {{.EXAMPLE_ENV}}"
        fi
        
  # === Tutorial and Learning ===
  tutorial:
    desc: "🎓 Interactive SOPS tutorial"
    cmds:
      - |
        echo "=== SOPS Secrets Management Tutorial ==="
        echo ""
        echo "📚 What is SOPS?"
        echo "SOPS (Secrets OPerationS) encrypts files with age/PGP keys."
        echo "Only authorized users with the private key can decrypt."
        echo ""
        echo "🔍 Let's examine your setup:"
        echo ""
        
        # Show key info
        if [[ -f "{{.AGE_KEY_FILE}}" ]]; then
          echo "✅ Age private key: {{.AGE_KEY_FILE}}"
          echo "🔑 Public key: $(age-keygen -y {{.AGE_KEY_FILE}})"
        else
          echo "❌ Age key missing - run 'task sops:keygen'"
        fi
        
        # Show SOPS config
        if [[ -f "{{.SOPS_CONFIG}}" ]]; then
          echo "✅ SOPS config: {{.SOPS_CONFIG}}"
          echo "📋 Configuration:"
          cat "{{.SOPS_CONFIG}}"
        else
          echo "❌ SOPS config missing - run 'task sops:scaffold'"
        fi
        
        echo ""
        echo "🔐 Encrypted files in secrets/:"
        find "{{.SECRETS_DIR}}" -name "*.sops.*" 2>/dev/null || echo "No encrypted files found"
        
        echo ""
        echo "🎯 Try these commands:"
        echo "  task sops:view          # View decrypted secrets"
        echo "  task sops:edit          # Edit secrets safely"
        echo "  task sops:status        # Check encryption status"
        
  # === Operations ===
  edit:
    desc: "✏️ Edit encrypted secrets (usage: task sops:edit -- <file>)"
    cmds:
      - |
        if [[ -n "{{.CLI_ARGS}}" ]]; then
          FILE="{{.CLI_ARGS}}"
        else
          FILE="{{.EXAMPLE_ENV}}"
        fi
        
        echo "✏️ Editing encrypted file: $FILE"
        sops "$FILE"
        
  view:
    desc: "👀 View decrypted secrets (usage: task sops:view -- <file>)"
    cmds:
      - |
        if [[ -n "{{.CLI_ARGS}}" ]]; then
          FILE="{{.CLI_ARGS}}"
        else
          FILE="{{.EXAMPLE_ENV}}"
        fi
        
        echo "👀 Decrypted contents of: $FILE"
        echo "" 
        sops --decrypt "$FILE"
        
  status:
    desc: "📊 Show encryption status of all secret files"
    cmds:
      - |
        echo "=== SOPS Encryption Status ==="
        echo ""
        
        # Find all .sops.* files
        encrypted_files=$(find "{{.SECRETS_DIR}}" -name "*.sops.*" -exec grep -l "sops:" {} \; 2>/dev/null || true)
        unencrypted_files=$(find "{{.SECRETS_DIR}}" -name "*.sops.*" -exec grep -L "sops:" {} \; 2>/dev/null || true)
        
        if [[ -n "$encrypted_files" ]]; then
          echo "✅ ENCRYPTED FILES:"
          echo "$encrypted_files" | sed 's|{{.SECRETS_DIR}}/|  |g'
          echo ""
        fi
        
        if [[ -n "$unencrypted_files" ]]; then
          echo "❌ UNENCRYPTED FILES:"
          echo "$unencrypted_files" | sed 's|{{.SECRETS_DIR}}/|  |g'
          echo ""
          echo "💡 Run 'task sops:encrypt' to encrypt them"
        fi
        
        if [[ -z "$encrypted_files" && -z "$unencrypted_files" ]]; then
          echo "ℹ️  No .sops.* files found in {{.SECRETS_DIR}}"
          echo "💡 Run 'task sops:demo-secrets' to create examples"
        fi
        
  encrypt:
    desc: "🔐 Encrypt unencrypted .sops.* files"
    cmds:
      - |
        echo "🔐 Encrypting unencrypted .sops.* files..."
        
        unencrypted=$(find "{{.SECRETS_DIR}}" -name "*.sops.*" -exec grep -L "sops:" {} \; 2>/dev/null || true)
        
        if [[ -z "$unencrypted" ]]; then
          echo "ℹ️  No unencrypted .sops.* files found"
          exit 0
        fi
        
        for file in $unencrypted; do
          echo "🔐 Encrypting: ${file#{{.SECRETS_DIR}}/}"
          sops -e -i "$file"
        done
        
        echo "✅ All files encrypted"
        
  # === Advanced Operations ===
  reset:
    desc: "🔄 Reset SOPS setup (DANGEROUS: deletes keys and secrets)"
    prompt: "This will delete all keys and secrets. Are you sure?"
    cmds:
      - |
        echo "🔄 Resetting SOPS setup..."
        rm -rf "{{.ROOT_DIR}}/.secrets" "{{.SECRETS_DIR}}" "{{.SOPS_CONFIG}}"
        echo "✅ SOPS setup reset complete"
        echo "💡 Run 'task sops:init' to reinitialize"
