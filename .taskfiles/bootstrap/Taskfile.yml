---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
# Bootstrap automation for IaC learning environment
version: '3'

tasks:
  # === Complete Bootstrap Process ===
  all:
    desc: "🚀 Complete bootstrap: dependencies + setup + validation"
    cmds:
      - task: deps
      - task: setup
      - task: validate
      - echo "✅ Bootstrap complete! Run 'task help' for next steps"
      
  # === Dependency Installation ===
  deps:
    desc: "📦 Install all required dependencies"
    cmds:
      - task: check-platform
      - task: install-brew
      - task: install-tools
      - task: install-docker
      - task: install-python
      
  check-platform:
    desc: "🔍 Check platform compatibility"
    cmds:
      - |
        echo "🗺️ Platform Detection:"
        echo "OS: $(uname -s)"
        echo "Architecture: $(uname -m)"
        echo "Kernel: $(uname -r)"
        
        case "$(uname -s)" in
          Darwin)
            echo "✅ macOS detected - full support"
            ;;
          Linux)
            echo "✅ Linux detected - full support"
            if command -v apt-get >/dev/null 2>&1; then
              echo "✅ APT package manager available"
            elif command -v yum >/dev/null 2>&1; then
              echo "✅ YUM package manager available"
            else
              echo "⚠️  No recognized package manager - manual setup may be needed"
            fi
            ;;
          *)
            echo "⚠️  Unsupported platform - some features may not work"
            ;;
        esac
        
  install-brew:
    desc: "🍺 Install Homebrew package manager"
    cmds:
      - |
        if command -v brew >/dev/null 2>&1; then
          echo "✅ Homebrew already installed: $(brew --version | head -1)"
        else
          echo "🍺 Installing Homebrew..."
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          
          # Add to PATH for current session
          case "$(uname -s)" in
            Darwin)
              echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
              eval "$(/opt/homebrew/bin/brew shellenv)"
              ;;
            Linux)
              echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"' >> ~/.bashrc
              eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
              ;;
          esac
          
          echo "✅ Homebrew installed successfully"
        fi
        
  install-tools:
    desc: "🔧 Install IaC tools via Homebrew"
    cmds:
      - |
        echo "🔧 Installing IaC tools..."
        
        # Core tools for IaC learning
        TOOLS="
          git
          direnv
          age
          sops
          go-task/tap/go-task
          pre-commit
          jq
          yq
        "
        
        for tool in $TOOLS; do
          if [[ "$tool" == *"/"* ]]; then
            # Handle tap-based tools
            tool_name=$(basename "$tool")
            if command -v "$tool_name" >/dev/null 2>&1; then
              echo "✅ $tool_name already installed"
            else
              echo "📦 Installing $tool..."
              brew install "$tool" || echo "⚠️  Failed to install $tool"
            fi
          else
            if command -v "$tool" >/dev/null 2>&1; then
              echo "✅ $tool already installed"
            else
              echo "📦 Installing $tool..."
              brew install "$tool" || echo "⚠️  Failed to install $tool"
            fi
          fi
        done
        
        echo "✅ Tool installation complete"
        
  install-docker:
    desc: "🐳 Install and configure Docker"
    cmds:
      - |
        if command -v docker >/dev/null 2>&1; then
          echo "✅ Docker already installed: $(docker --version)"
          
          # Check if Docker daemon is running
          if docker info >/dev/null 2>&1; then
            echo "✅ Docker daemon is running"
          else
            echo "⚠️  Docker daemon not running"
            case "$(uname -s)" in
              Darwin)
                echo "💡 Start Docker Desktop app"
                ;;
              Linux)
                echo "💡 Starting Docker daemon..."
                sudo systemctl start docker || echo "⚠️  Failed to start Docker"
                sudo systemctl enable docker || echo "⚠️  Failed to enable Docker"
                ;;
            esac
          fi
        else
          echo "🐳 Installing Docker..."
          case "$(uname -s)" in
            Darwin)
              echo "💡 Please install Docker Desktop from: https://docker.com/products/docker-desktop"
              echo "After installation, start Docker Desktop and run this task again"
              ;;
            Linux)
              # Install Docker Engine on Linux
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo usermod -aG docker $USER
              sudo systemctl start docker
              sudo systemctl enable docker
              rm get-docker.sh
              echo "✅ Docker installed. Please log out and back in for group changes to take effect"
              ;;
          esac
        fi
        
  install-python:
    desc: "🐍 Install Python dependencies"
    cmds:
      - |
        echo "🐍 Installing Python dependencies..."
        
        # Check Python 3
        if command -v python3 >/dev/null 2>&1; then
          echo "✅ Python 3 available: $(python3 --version)"
        else
          echo "📦 Installing Python 3..."
          brew install python3
        fi
        
        # Install pip dependencies for documentation
        pip3 install --user PyYAML requests jinja2 || echo "⚠️  Failed to install some Python packages"
        
        echo "✅ Python setup complete"
        
  # === Environment Setup ===
  setup:
    desc: "🏠 Setup development environment"
    cmds:
      - task: create-dirs
      - task: setup-direnv
      - task: setup-git
      - task: init-secrets
      
  create-dirs:
    desc: "📁 Create project directory structure"
    cmds:
      - |
        echo "📁 Creating directory structure..."
        
        DIRS="
          .secrets
          secrets
          examples
          docs
          scripts
          .taskfiles/examples
          .taskfiles/validate
          .taskfiles/readme
        "
        
        for dir in $DIRS; do
          mkdir -p "{{.ROOT_DIR}}/$dir"
          echo "✅ Created: $dir"
        done
        
  setup-direnv:
    desc: "🌍 Setup direnv environment management"
    cmds:
      - |
        echo "🌍 Setting up direnv..."
        
        # Create .envrc if it doesn't exist
        if [[ ! -f "{{.ROOT_DIR}}/.envrc" ]]; then
          cat > "{{.ROOT_DIR}}/.envrc" << 'EOF'
        # shellcheck disable=SC2148,SC2155
        # IaC Learning Template - Environment Configuration
        
        # SOPS Age encryption key
        export SOPS_AGE_KEY_FILE={{.ROOT_DIR}}/.secrets/age.key
        
        # Task configuration
        export TASK_X_ENV_PRECEDENCE=1
        export TASK_X_MAP_VARIABLES=0
        
        # Project settings
        export IAC_PROJECT_NAME="iac-learning-template"
        export IAC_ENV="development"
        
        # Docker Compose settings
        export COMPOSE_PROJECT_NAME="iac-learning"
        export COMPOSE_FILE="{{.ROOT_DIR}}/examples/docker-compose.yml"
        
        echo "🌍 Environment loaded for IaC Learning Template"
        EOF
          
          echo "✅ Created .envrc"
        fi
        
        # Allow direnv
        if command -v direnv >/dev/null 2>&1; then
          direnv allow || echo "⚠️  Failed to allow direnv"
          echo "✅ direnv configured"
        else
          echo "⚠️  direnv not found - skipping"
        fi
        
  setup-git:
    desc: "🤝 Setup Git configuration and hooks"
    cmds:
      - |
        echo "🤝 Setting up Git..."
        
        # Initialize git if not already done
        if [[ ! -d "{{.ROOT_DIR}}/.git" ]]; then
          git init
          echo "✅ Git repository initialized"
        fi
        
        # Setup pre-commit if available
        if command -v pre-commit >/dev/null 2>&1; then
          echo "🔗 Installing pre-commit hooks..."
          pre-commit install || echo "⚠️  Failed to install pre-commit hooks"
        fi
        
  init-secrets:
    desc: "🔐 Initialize secrets management"
    cmds:
      - |
        echo "🔐 Initializing secrets management..."
        if command -v task >/dev/null 2>&1; then
          task sops:init || echo "⚠️  Failed to initialize SOPS"
        else
          echo "⚠️  Task not available - skipping SOPS initialization"
        fi
        
  # === Development Environment ===
  dev:
    desc: "🛠️ Setup development environment with additional tools"
    cmds:
      - task: all
      - task: dev-tools
      - task: dev-config
      
  dev-tools:
    desc: "🛠️ Install additional development tools"
    cmds:
      - |
        echo "🛠️ Installing development tools..."
        
        DEV_TOOLS="
          htop
          tree
          watch
          curl
          wget
          httpie
          yamllint
          shellcheck
        "
        
        for tool in $DEV_TOOLS; do
          if command -v "$tool" >/dev/null 2>&1; then
            echo "✅ $tool already installed"
          else
            echo "📦 Installing $tool..."
            brew install "$tool" || echo "⚠️  Failed to install $tool"
          fi
        done
        
  dev-config:
    desc: "⚙️ Setup development configuration"
    cmds:
      - |
        echo "⚙️ Setting up development configuration..."
        
        # Create development-specific environment
        cat > "{{.ROOT_DIR}}/.envrc.dev" << 'EOF'
        # Development-specific environment variables
        export IAC_ENV="development"
        export DEBUG=true
        export VERBOSE=true
        export COMPOSE_PROFILES="monitoring,development"
        EOF
        
        echo "✅ Development configuration complete"
        
  # === Validation ===
  validate:
    desc: "✅ Validate bootstrap installation"
    cmds:
      - |
        echo "=== Bootstrap Validation ==="
        failed=0
        
        # Check required commands
        REQUIRED="brew git direnv age sops task docker"
        
        for cmd in $REQUIRED; do
          if command -v "$cmd" >/dev/null 2>&1; then
            echo "✅ $cmd: $(which $cmd)"
          else
            echo "❌ $cmd: not found"
            failed=1
          fi
        done
        
        # Check Docker daemon
        if docker info >/dev/null 2>&1; then
          echo "✅ Docker daemon: running"
        else
          echo "❌ Docker daemon: not running"
          failed=1
        fi
        
        # Check directory structure
        DIRS=".secrets secrets examples docs"
        for dir in $DIRS; do
          if [[ -d "{{.ROOT_DIR}}/$dir" ]]; then
            echo "✅ Directory: $dir"
          else
            echo "❌ Directory: $dir missing"
            failed=1
          fi
        done
        
        if [[ $failed -eq 0 ]]; then
          echo ""
          echo "🎉 Bootstrap validation PASSED!"
          echo "🚀 Ready to start learning IaC. Run: task help"
        else
          echo ""
          echo "🚨 Bootstrap validation FAILED"
          echo "💡 Fix the issues above and run: task bootstrap:validate"
          exit 1
        fi
